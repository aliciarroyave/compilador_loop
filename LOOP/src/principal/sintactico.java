
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 18 10:42:50 CST 2019
//----------------------------------------------------

package principal;

import java_cup.runtime.Symbol;
import objetos.Arbol;
import objetos.Nodo;
import objetos.token;
import java.util.ArrayList;
import objetos.Pila;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 18 10:42:50 CST 2019
  */
public class sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\004\003\000\002\004\004\000\002\006\004" +
    "\000\002\036\003\000\002\036\004\000\002\037\005\000" +
    "\002\040\004\000\002\041\006\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\021\003\000\002\021" +
    "\004\000\002\045\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\046\003\000" +
    "\002\046\005\000\002\043\006\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\005\003\000\002\005" +
    "\004\000\002\013\004\000\002\012\006\000\002\012\007" +
    "\000\002\007\003\000\002\007\003\000\002\011\003\000" +
    "\002\011\005\000\002\014\004\000\002\015\003\000\002" +
    "\015\004\000\002\016\004\000\002\023\003\000\002\023" +
    "\003\000\002\017\003\000\002\017\004\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\024\005\000\002" +
    "\024\005\000\002\033\004\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\051\003\000\002\051\003\000\002\031" +
    "\005\000\002\031\005\000\002\025\006\000\002\025\005" +
    "\000\002\047\003\000\002\047\005\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\034\005\000\002\026" +
    "\013\000\002\026\013\000\002\032\003\000\002\032\005" +
    "\000\002\027\010\000\002\027\010\000\002\027\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\006\010\006\027\007\001\002\000\004\030" +
    "\022\001\002\000\004\027\007\001\002\000\004\076\020" +
    "\001\002\000\004\102\017\001\002\000\004\002\001\001" +
    "\002\000\004\002\016\001\002\000\006\010\006\027\ufffe" +
    "\001\002\000\006\002\ufffb\027\007\001\002\000\004\002" +
    "\ufffa\001\002\000\004\027\ufffd\001\002\000\004\002\000" +
    "\001\002\000\004\030\ufff8\001\002\000\006\010\ufffc\027" +
    "\ufffc\001\002\000\004\002\uffff\001\002\000\010\032\242" +
    "\033\243\034\244\001\002\000\004\031\024\001\002\000" +
    "\010\035\030\036\031\037\026\001\002\000\006\002\ufff9" +
    "\027\ufff9\001\002\000\004\067\uffe8\001\002\000\004\067" +
    "\032\001\002\000\004\067\uffe7\001\002\000\004\067\uffe9" +
    "\001\002\000\012\004\035\005\042\006\037\007\033\001" +
    "\002\000\006\040\uffef\101\uffef\001\002\000\006\040\227" +
    "\101\226\001\002\000\006\040\uffed\101\uffed\001\002\000" +
    "\016\011\056\012\052\014\051\020\054\026\061\101\050" +
    "\001\002\000\006\040\uffee\101\uffee\001\002\000\016\002" +
    "\uffe6\004\035\005\042\006\037\007\033\027\uffe6\001\002" +
    "\000\006\002\uffea\027\uffea\001\002\000\006\040\ufff0\101" +
    "\ufff0\001\002\000\006\002\uffe5\027\uffe5\001\002\000\016" +
    "\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\027\uffe4\001" +
    "\002\000\020\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\027\uffdc\070\225\001\002\000\034\002\uffd0\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\011\uffd0\012\uffd0\014\uffd0\020\uffd0" +
    "\026\uffd0\027\uffd0\070\uffd0\101\uffd0\001\002\000\034\002" +
    "\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1\012\uffd1" +
    "\014\uffd1\020\uffd1\026\uffd1\027\uffd1\070\uffd1\101\uffd1\001" +
    "\002\000\006\054\214\071\137\001\002\000\024\015\075" +
    "\016\065\021\211\063\063\071\067\076\064\077\066\100" +
    "\072\101\070\001\002\000\006\067\203\071\204\001\002" +
    "\000\034\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011" +
    "\uffd2\012\uffd2\014\uffd2\020\uffd2\026\uffd2\027\uffd2\070\uffd2" +
    "\101\uffd2\001\002\000\004\071\164\001\002\000\034\002" +
    "\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011\056\012\052" +
    "\014\051\020\054\026\061\027\uffd7\070\uffd7\101\050\001" +
    "\002\000\004\071\156\001\002\000\034\002\uffd5\004\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\011\uffd5\012\uffd5\014\uffd5\020" +
    "\uffd5\026\uffd5\027\uffd5\070\uffd5\101\uffd5\001\002\000\034" +
    "\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012" +
    "\uffd3\014\uffd3\020\uffd3\026\uffd3\027\uffd3\070\uffd3\101\uffd3" +
    "\001\002\000\022\015\075\016\065\063\063\071\067\076" +
    "\064\077\066\100\072\101\070\001\002\000\034\002\uffd4" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\012\uffd4\014" +
    "\uffd4\020\uffd4\026\uffd4\027\uffd4\070\uffd4\101\uffd4\001\002" +
    "\000\102\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\011" +
    "\uffc6\012\uffc6\014\uffc6\020\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\026\uffc6\027\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\062\uffc6\064\uffc6\065\uffc6\070\uffc6\072\uffc6\075\uffc6\101" +
    "\uffc6\001\002\000\102\002\uffc9\004\uffc9\005\uffc9\006\uffc9" +
    "\007\uffc9\011\uffc9\012\uffc9\014\uffc9\020\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\026\uffc9\027\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\055\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\061\uffc9\062\uffc9\064\uffc9\065\uffc9\070\uffc9\072\uffc9" +
    "\075\uffc9\101\uffc9\001\002\000\102\002\uffcb\004\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\011\uffcb\012\uffcb\014\uffcb\020\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\026\uffcb\027\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\055\uffcb\056\uffcb" +
    "\057\uffcb\060\uffcb\061\uffcb\062\uffcb\064\uffcb\065\uffcb\070" +
    "\uffcb\072\uffcb\075\uffcb\101\uffcb\001\002\000\102\002\uffc8" +
    "\004\uffc8\005\uffc8\006\uffc8\007\uffc8\011\uffc8\012\uffc8\014" +
    "\uffc8\020\uffc8\022\uffc8\023\uffc8\024\uffc8\026\uffc8\027\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\064\uffc8" +
    "\065\uffc8\070\uffc8\072\uffc8\075\uffc8\101\uffc8\001\002\000" +
    "\022\015\075\016\065\063\063\071\067\076\064\077\066" +
    "\100\072\101\070\001\002\000\104\002\uffcc\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\011\uffcc\012\uffcc\014\uffcc\020\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\062\uffcc\064\uffcc\065\uffcc\070" +
    "\uffcc\071\137\072\uffcc\075\uffcc\101\uffcc\001\002\000\104" +
    "\002\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\011\uffc4\012" +
    "\uffc4\014\uffc4\020\uffc4\022\uffc4\023\uffc4\024\uffc4\026\uffc4" +
    "\027\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4" +
    "\064\uffc4\065\uffc4\066\135\070\uffc4\072\uffc4\075\uffc4\101" +
    "\uffc4\001\002\000\102\002\uffc7\004\uffc7\005\uffc7\006\uffc7" +
    "\007\uffc7\011\uffc7\012\uffc7\014\uffc7\020\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\026\uffc7\027\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\064\uffc7\065\uffc7\070\uffc7\072\uffc7" +
    "\075\uffc7\101\uffc7\001\002\000\072\002\uffcd\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\011\uffcd\012\uffcd\014\uffcd\020\uffcd" +
    "\026\uffcd\027\uffcd\046\103\047\113\050\104\051\110\052" +
    "\106\053\112\055\111\056\114\057\100\060\105\061\107" +
    "\062\102\064\077\065\115\070\uffcd\075\101\101\uffcd\001" +
    "\002\000\102\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\011\uffc5\012\uffc5\014\uffc5\020\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\026\uffc5\027\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061" +
    "\uffc5\062\uffc5\064\uffc5\065\uffc5\070\uffc5\072\uffc5\075\uffc5" +
    "\101\uffc5\001\002\000\102\002\uffca\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\011\uffca\012\uffca\014\uffca\020\uffca\022\uffca" +
    "\023\uffca\024\uffca\026\uffca\027\uffca\046\uffca\047\uffca\050" +
    "\uffca\051\uffca\052\uffca\053\uffca\055\uffca\056\uffca\057\uffca" +
    "\060\uffca\061\uffca\062\uffca\064\uffca\065\uffca\070\uffca\072" +
    "\uffca\075\uffca\101\uffca\001\002\000\102\002\uffc3\004\uffc3" +
    "\005\uffc3\006\uffc3\007\uffc3\011\uffc3\012\uffc3\014\uffc3\020" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\026\uffc3\027\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\055\uffc3\056" +
    "\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\064\uffc3\065\uffc3" +
    "\070\uffc3\072\uffc3\075\uffc3\101\uffc3\001\002\000\022\015" +
    "\uffb3\016\uffb3\063\uffb3\071\uffb3\076\uffb3\077\uffb3\100\uffb3" +
    "\101\uffb3\001\002\000\022\015\075\016\065\063\063\071" +
    "\067\076\064\077\066\100\072\101\070\001\002\000\022" +
    "\015\075\016\065\063\063\071\067\076\064\077\066\100" +
    "\072\101\070\001\002\000\022\015\075\016\065\063\063" +
    "\071\067\076\064\077\066\100\072\101\070\001\002\000" +
    "\022\015\075\016\065\063\063\071\067\076\064\077\066" +
    "\100\072\101\070\001\002\000\022\015\075\016\065\063" +
    "\063\071\067\076\064\077\066\100\072\101\070\001\002" +
    "\000\022\015\075\016\065\063\063\071\067\076\064\077" +
    "\066\100\072\101\070\001\002\000\022\015\075\016\065" +
    "\063\063\071\067\076\064\077\066\100\072\101\070\001" +
    "\002\000\022\015\075\016\065\063\063\071\067\076\064" +
    "\077\066\100\072\101\070\001\002\000\022\015\075\016" +
    "\065\063\063\071\067\076\064\077\066\100\072\101\070" +
    "\001\002\000\022\015\075\016\065\063\063\071\067\076" +
    "\064\077\066\100\072\101\070\001\002\000\022\015\075" +
    "\016\065\063\063\071\067\076\064\077\066\100\072\101" +
    "\070\001\002\000\022\015\075\016\065\063\063\071\067" +
    "\076\064\077\066\100\072\101\070\001\002\000\022\015" +
    "\075\016\065\063\063\071\067\076\064\077\066\100\072" +
    "\101\070\001\002\000\022\015\uffb2\016\uffb2\063\uffb2\071" +
    "\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\001\002\000\022" +
    "\015\075\016\065\063\063\071\067\076\064\077\066\100" +
    "\072\101\070\001\002\000\102\002\uffb4\004\uffb4\005\uffb4" +
    "\006\uffb4\007\uffb4\011\uffb4\012\uffb4\014\uffb4\020\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\026\uffb4\027\uffb4\046\103\047\113" +
    "\050\104\051\110\052\106\053\112\055\111\056\114\057" +
    "\100\060\105\061\107\062\102\064\077\065\115\070\uffb4" +
    "\072\uffb4\075\101\101\uffb4\001\002\000\102\002\uffb9\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\011\uffb9\012\uffb9\014\uffb9" +
    "\020\uffb9\022\uffb9\023\uffb9\024\uffb9\026\uffb9\027\uffb9\046" +
    "\103\047\113\050\104\051\110\052\106\053\112\055\111" +
    "\056\114\057\100\060\105\061\107\062\102\064\077\065" +
    "\115\070\uffb9\072\uffb9\075\101\101\uffb9\001\002\000\102" +
    "\002\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf\012" +
    "\uffbf\014\uffbf\020\uffbf\022\uffbf\023\uffbf\024\uffbf\026\uffbf" +
    "\027\uffbf\046\103\047\113\050\104\051\110\052\106\053" +
    "\112\055\111\056\114\057\100\060\105\061\107\062\102" +
    "\064\077\065\115\070\uffbf\072\uffbf\075\101\101\uffbf\001" +
    "\002\000\102\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\011\uffbb\012\uffbb\014\uffbb\020\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\026\uffbb\027\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\064\uffbb\065\uffbb\070\uffbb\072\uffbb\075\uffbb" +
    "\101\uffbb\001\002\000\102\002\uffba\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\011\uffba\012\uffba\014\uffba\020\uffba\022\uffba" +
    "\023\uffba\024\uffba\026\uffba\027\uffba\046\103\047\113\050" +
    "\104\051\110\052\106\053\112\055\111\056\114\057\100" +
    "\060\105\061\107\062\102\064\077\065\115\070\uffba\072" +
    "\uffba\075\101\101\uffba\001\002\000\102\002\uffbd\004\uffbd" +
    "\005\uffbd\006\uffbd\007\uffbd\011\uffbd\012\uffbd\014\uffbd\020" +
    "\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd\027\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\064\uffbd\065\uffbd" +
    "\070\uffbd\072\uffbd\075\uffbd\101\uffbd\001\002\000\102\002" +
    "\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\011\uffb6\012\uffb6" +
    "\014\uffb6\020\uffb6\022\uffb6\023\uffb6\024\uffb6\026\uffb6\027" +
    "\uffb6\046\103\047\113\050\104\051\110\052\106\053\112" +
    "\055\111\056\114\057\100\060\105\061\107\062\102\064" +
    "\077\065\115\070\uffb6\072\uffb6\075\101\101\uffb6\001\002" +
    "\000\102\002\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\011" +
    "\uffbc\012\uffbc\014\uffbc\020\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\026\uffbc\027\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\062\uffbc\064\uffbc\065\uffbc\070\uffbc\072\uffbc\075\uffbc\101" +
    "\uffbc\001\002\000\102\002\uffb8\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\011\uffb8\012\uffb8\014\uffb8\020\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\026\uffb8\027\uffb8\046\103\047\113\050\104" +
    "\051\110\052\106\053\112\055\111\056\114\057\100\060" +
    "\105\061\107\062\102\064\077\065\115\070\uffb8\072\uffb8" +
    "\075\101\101\uffb8\001\002\000\102\002\uffbe\004\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\011\uffbe\012\uffbe\014\uffbe\020\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\026\uffbe\027\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\060\uffbe\061\uffbe\062\uffbe\064\uffbe\065\uffbe\070" +
    "\uffbe\072\uffbe\075\uffbe\101\uffbe\001\002\000\102\002\uffc0" +
    "\004\uffc0\005\uffc0\006\uffc0\007\uffc0\011\uffc0\012\uffc0\014" +
    "\uffc0\020\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0\027\uffc0" +
    "\046\103\047\113\050\104\051\110\052\106\053\112\055" +
    "\111\056\114\057\100\060\105\061\107\062\102\064\077" +
    "\065\115\070\uffc0\072\uffc0\075\101\101\uffc0\001\002\000" +
    "\102\002\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\011\uffb5" +
    "\012\uffb5\014\uffb5\020\uffb5\022\uffb5\023\uffb5\024\uffb5\026" +
    "\uffb5\027\uffb5\046\103\047\113\050\104\051\110\052\106" +
    "\053\112\055\111\056\114\057\100\060\105\061\107\062" +
    "\102\064\077\065\115\070\uffb5\072\uffb5\075\101\101\uffb5" +
    "\001\002\000\102\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\011\uffc1\012\uffc1\014\uffc1\020\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\026\uffc1\027\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1" +
    "\061\uffc1\062\uffc1\064\uffc1\065\uffc1\070\uffc1\072\uffc1\075" +
    "\uffc1\101\uffc1\001\002\000\102\002\uffb7\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\011\uffb7\012\uffb7\014\uffb7\020\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\026\uffb7\027\uffb7\046\103\047\113" +
    "\050\104\051\110\052\106\053\112\055\111\056\114\057" +
    "\100\060\105\061\107\062\102\064\077\065\115\070\uffb7" +
    "\072\uffb7\075\101\101\uffb7\001\002\000\002\001\002\000" +
    "\102\002\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\011\uffa5" +
    "\012\uffa5\014\uffa5\020\uffa5\022\uffa5\023\uffa5\024\uffa5\026" +
    "\uffa5\027\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062" +
    "\uffa5\064\uffa5\065\uffa5\070\uffa5\072\uffa5\075\uffa5\101\uffa5" +
    "\001\002\000\020\015\147\016\141\072\143\076\140\077" +
    "\142\100\146\101\145\001\002\000\006\072\uffa8\075\uffa8" +
    "\001\002\000\006\072\uffa7\075\uffa7\001\002\000\006\072" +
    "\uffaa\075\uffaa\001\002\000\102\002\uffae\004\uffae\005\uffae" +
    "\006\uffae\007\uffae\011\uffae\012\uffae\014\uffae\020\uffae\022" +
    "\uffae\023\uffae\024\uffae\026\uffae\027\uffae\046\uffae\047\uffae" +
    "\050\uffae\051\uffae\052\uffae\053\uffae\055\uffae\056\uffae\057" +
    "\uffae\060\uffae\061\uffae\062\uffae\064\uffae\065\uffae\070\uffae" +
    "\072\uffae\075\uffae\101\uffae\001\002\000\006\072\uffad\075" +
    "\152\001\002\000\006\072\uffab\075\uffab\001\002\000\006" +
    "\072\uffa9\075\uffa9\001\002\000\006\072\uffa6\075\uffa6\001" +
    "\002\000\004\072\151\001\002\000\102\002\uffaf\004\uffaf" +
    "\005\uffaf\006\uffaf\007\uffaf\011\uffaf\012\uffaf\014\uffaf\020" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\026\uffaf\027\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\055\uffaf\056" +
    "\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\064\uffaf\065\uffaf" +
    "\070\uffaf\072\uffaf\075\uffaf\101\uffaf\001\002\000\016\015" +
    "\147\016\141\076\140\077\142\100\146\101\145\001\002" +
    "\000\004\072\uffac\001\002\000\042\046\103\047\113\050" +
    "\104\051\110\052\106\053\112\055\111\056\114\057\100" +
    "\060\105\061\107\062\102\064\077\065\115\072\155\075" +
    "\101\001\002\000\102\002\uffc2\004\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\011\uffc2\012\uffc2\014\uffc2\020\uffc2\022\uffc2\023" +
    "\uffc2\024\uffc2\026\uffc2\027\uffc2\046\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\055\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\062\uffc2\064\uffc2\065\uffc2\070\uffc2\072\uffc2" +
    "\075\uffc2\101\uffc2\001\002\000\022\015\075\016\065\063" +
    "\063\071\067\076\064\077\066\100\072\101\070\001\002" +
    "\000\042\046\103\047\113\050\104\051\110\052\106\053" +
    "\112\055\111\056\114\057\100\060\105\061\107\062\102" +
    "\064\077\065\115\072\160\075\101\001\002\000\004\013" +
    "\161\001\002\000\004\067\162\001\002\000\034\002\uffa0" +
    "\004\uffa0\005\uffa0\006\uffa0\007\uffa0\011\uffa0\012\uffa0\014" +
    "\uffa0\020\uffa0\026\uffa0\027\uffa0\070\uffa0\101\uffa0\001\002" +
    "\000\020\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\027" +
    "\uffd6\070\uffd6\001\002\000\004\101\165\001\002\000\006" +
    "\022\uffa2\054\201\001\002\000\004\022\167\001\002\000" +
    "\022\015\075\016\065\063\063\071\067\076\064\077\066" +
    "\100\072\101\070\001\002\000\044\023\171\024\172\046" +
    "\103\047\113\050\104\051\110\052\106\053\112\055\111" +
    "\056\114\057\100\060\105\061\107\062\102\064\077\065" +
    "\115\075\101\001\002\000\004\077\176\001\002\000\004" +
    "\077\173\001\002\000\004\072\174\001\002\000\004\025" +
    "\175\001\002\000\034\002\uffa3\004\uffa3\005\uffa3\006\uffa3" +
    "\007\uffa3\011\uffa3\012\uffa3\014\uffa3\020\uffa3\026\uffa3\027" +
    "\uffa3\070\uffa3\101\uffa3\001\002\000\004\072\177\001\002" +
    "\000\004\025\200\001\002\000\034\002\uffa4\004\uffa4\005" +
    "\uffa4\006\uffa4\007\uffa4\011\uffa4\012\uffa4\014\uffa4\020\uffa4" +
    "\026\uffa4\027\uffa4\070\uffa4\101\uffa4\001\002\000\022\015" +
    "\075\016\065\063\063\071\067\076\064\077\066\100\072" +
    "\101\070\001\002\000\042\022\uffa1\046\103\047\113\050" +
    "\104\051\110\052\106\053\112\055\111\056\114\057\100" +
    "\060\105\061\107\062\102\064\077\065\115\075\101\001" +
    "\002\000\034\002\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e" +
    "\011\uff9e\012\uff9e\014\uff9e\020\uff9e\026\uff9e\027\uff9e\070" +
    "\uff9e\101\uff9e\001\002\000\022\015\075\016\065\063\063" +
    "\071\067\076\064\077\066\100\072\101\070\001\002\000" +
    "\042\046\103\047\113\050\104\051\110\052\106\053\112" +
    "\055\111\056\114\057\100\060\105\061\107\062\102\064" +
    "\077\065\115\072\206\075\101\001\002\000\004\013\207" +
    "\001\002\000\004\067\210\001\002\000\034\002\uff9f\004" +
    "\uff9f\005\uff9f\006\uff9f\007\uff9f\011\uff9f\012\uff9f\014\uff9f" +
    "\020\uff9f\026\uff9f\027\uff9f\070\uff9f\101\uff9f\001\002\000" +
    "\034\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9" +
    "\012\uffd9\014\uffd9\020\uffd9\026\uffd9\027\uffd9\070\uffd9\101" +
    "\uffd9\001\002\000\034\002\uffda\004\uffda\005\uffda\006\uffda" +
    "\007\uffda\011\uffda\012\uffda\014\uffda\020\uffda\026\uffda\027" +
    "\uffda\070\uffda\101\uffda\001\002\000\072\002\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8\014\uffd8\020" +
    "\uffd8\026\uffd8\027\uffd8\046\103\047\113\050\104\051\110" +
    "\052\106\053\112\055\111\056\114\057\100\060\105\061" +
    "\107\062\102\064\077\065\115\070\uffd8\075\101\101\uffd8" +
    "\001\002\000\024\015\075\016\065\046\215\063\063\071" +
    "\067\076\064\077\066\100\072\101\216\001\002\000\004" +
    "\046\223\001\002\000\074\002\uffcc\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\011\uffcc\012\uffcc\014\uffcc\020\uffcc\026\uffcc" +
    "\027\uffcc\046\uffcc\047\221\050\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc" +
    "\064\uffcc\065\uffcc\070\uffcc\071\137\075\uffcc\101\uffcc\001" +
    "\002\000\034\002\uffce\004\uffce\005\uffce\006\uffce\007\uffce" +
    "\011\uffce\012\uffce\014\uffce\020\uffce\026\uffce\027\uffce\070" +
    "\uffce\101\uffce\001\002\000\072\002\uffcf\004\uffcf\005\uffcf" +
    "\006\uffcf\007\uffcf\011\uffcf\012\uffcf\014\uffcf\020\uffcf\026" +
    "\uffcf\027\uffcf\046\103\047\113\050\104\051\110\052\106" +
    "\053\112\055\111\056\114\057\100\060\105\061\107\062" +
    "\102\064\077\065\115\070\uffcf\075\101\101\uffcf\001\002" +
    "\000\004\047\222\001\002\000\034\002\uffb0\004\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\011\uffb0\012\uffb0\014\uffb0\020\uffb0" +
    "\026\uffb0\027\uffb0\070\uffb0\101\uffb0\001\002\000\004\101" +
    "\224\001\002\000\034\002\uffb1\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\011\uffb1\012\uffb1\014\uffb1\020\uffb1\026\uffb1\027" +
    "\uffb1\070\uffb1\101\uffb1\001\002\000\016\002\uffdb\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\027\uffdb\001\002\000\004\071" +
    "\uffe1\001\002\000\004\071\uffe0\001\002\000\004\071\231" +
    "\001\002\000\014\004\035\005\042\006\037\007\033\072" +
    "\234\001\002\000\004\101\241\001\002\000\006\072\uffdf" +
    "\075\237\001\002\000\016\011\uffe3\012\uffe3\014\uffe3\020" +
    "\uffe3\026\uffe3\101\uffe3\001\002\000\004\072\236\001\002" +
    "\000\016\011\uffe2\012\uffe2\014\uffe2\020\uffe2\026\uffe2\101" +
    "\uffe2\001\002\000\012\004\035\005\042\006\037\007\033" +
    "\001\002\000\004\072\uffde\001\002\000\006\072\uffdd\075" +
    "\uffdd\001\002\000\004\067\ufff4\001\002\000\004\067\ufff6" +
    "\001\002\000\004\067\ufff5\001\002\000\004\067\246\001" +
    "\002\000\012\004\035\005\042\006\037\007\033\001\002" +
    "\000\004\101\253\001\002\000\014\004\035\005\042\006" +
    "\037\007\033\031\ufff3\001\002\000\004\031\ufff7\001\002" +
    "\000\004\031\ufff2\001\002\000\016\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\031\uffec\075\255\001\002\000\014\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\031\ufff1\001\002\000\004\101" +
    "\253\001\002\000\014\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\031\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\016\002\010\004\004\006\011\036\007\037" +
    "\012\040\003\001\001\000\004\041\022\001\001\000\010" +
    "\036\020\037\012\040\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\014\006\011\001\001\000\010\036\013\037\012\040" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\244\001\001\000\004\043\024\001\001" +
    "\000\004\044\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\033\005\040\012\035\013\037\001\001\000" +
    "\002\001\001\000\004\007\227\001\001\000\002\001\001" +
    "\000\024\015\043\016\045\017\044\022\054\024\046\025" +
    "\056\026\061\027\057\033\052\001\001\000\002\001\001" +
    "\000\012\003\033\005\042\012\035\013\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\023\211\025\075\030\212" +
    "\034\073\035\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\045\017\162\022\054" +
    "\024\046\025\056\026\061\027\057\033\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\075\030\072\034\073\035\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\075\030\153\034\073\035" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\075\030\133\034\073\035\070\001\001\000\012\025" +
    "\075\030\132\034\073\035\070\001\001\000\012\025\075" +
    "\030\131\034\073\035\070\001\001\000\012\025\075\030" +
    "\130\034\073\035\070\001\001\000\012\025\075\030\127" +
    "\034\073\035\070\001\001\000\012\025\075\030\126\034" +
    "\073\035\070\001\001\000\012\025\075\030\125\034\073" +
    "\035\070\001\001\000\012\025\075\030\124\034\073\035" +
    "\070\001\001\000\012\025\075\030\123\034\073\035\070" +
    "\001\001\000\012\025\075\030\122\034\073\035\070\001" +
    "\001\000\012\025\075\030\121\034\073\035\070\001\001" +
    "\000\012\025\075\030\120\034\073\035\070\001\001\000" +
    "\012\025\075\030\117\034\073\035\070\001\001\000\002" +
    "\001\001\000\012\025\075\030\116\034\073\035\070\001" +
    "\001\000\004\051\115\001\001\000\004\051\115\001\001" +
    "\000\004\051\115\001\001\000\004\051\115\001\001\000" +
    "\004\051\115\001\001\000\004\051\115\001\001\000\004" +
    "\051\115\001\001\000\004\051\115\001\001\000\004\051" +
    "\115\001\001\000\004\051\115\001\001\000\004\051\115" +
    "\001\001\000\004\051\115\001\001\000\004\051\115\001" +
    "\001\000\004\051\115\001\001\000\004\010\135\001\001" +
    "\000\002\001\001\000\006\020\143\047\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\143\047\152\001\001\000\002\001\001\000" +
    "\004\051\115\001\001\000\002\001\001\000\012\025\075" +
    "\030\156\034\073\035\070\001\001\000\004\051\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\025\075\030\167\034\073" +
    "\035\070\001\001\000\004\051\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\025\075\030\201\034\073\035\070" +
    "\001\001\000\004\051\115\001\001\000\002\001\001\000" +
    "\012\025\075\030\204\034\073\035\070\001\001\000\004" +
    "\051\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\115\001\001\000\014\025\075\030\217\031\216\034" +
    "\073\035\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\231\011\234\014\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\231\011\237" +
    "\014\232\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\246\021\250\045\247\001\001\000" +
    "\004\046\253\001\001\000\010\003\246\021\251\045\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\255\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    pila = new Pila();
    raiz = new Nodo("PROGRAMA", -2, Nodo.TIPO_RAIZ);
    arbolSintactico = new Arbol(raiz);

    }

 
    public Arbol arbolSintactico;
    public Nodo raiz, auxLibrerias, auxiliar, auxClases, auxiliar2;
    
    public String funcionTem;
    public int tipoFun;
    Pila pila;
    
    public static final int TIPO_INDENTACION = 1;
    public static final int TIPO_CONDICION = 2;

    @Override
    public void syntax_error(Symbol sy) {
        token t=(token)sy.value;
        done_parsing();
        report_error("Error sintáctico cerca de \""+ t.getNombre()+"\" ["+ (t.getFila()+1) +" : "+t.getColumna()+"]",null);
    }

    public void syntax_error(int tipo, int fila, int columna) {
        done_parsing();
        switch (tipo){
            case 1:
                report_error("Error sintáctico: identacion incorrecta: En la linea [" + (fila+1) + "]" ,null);
                break;
            case 2:
                report_error("Error sintáctico: sino sin un si previo: En la linea [" + (fila+1) + "]" ,null);
                break;
            default:
                report_error("Error sintactico",null);
                break;
        }
    }
    public void syntax_error(int tipo) {
        done_parsing();
        switch (tipo){
            case 1:
                report_error("Error sintáctico: identacion incorrecta",null);
                break;
            default:
                report_error("Error sintactico",null);
                break;
        }
    }
    public void syntax_error(String mensaje) {
        done_parsing();
        report_error("Error sintáctico: " + mensaje,null);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintactico$actions {



  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Condicion ::= RSINO PUNTOPUNTO 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                    token sino = (token) s;
                    Nodo nsino = new Nodo ("sino", sino.getTab()+1, Nodo.TIPO_SINO, sino.getFila(), sino.getColumna());
                    Nodo cod = new Nodo ("BLOQUE CODIGO", sino.getTab()+1, Nodo.TIPO_BLOQUE);
                    nsino.agregarHijoNI(cod);
                    RESULT = nsino;
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Condicion",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Condicion ::= RSINO PARENTESISA Expresion PARENTESISC RENTONCES PUNTOPUNTO 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
                    token sino = (token) s;
                    Nodo nsino = new Nodo ("sino", sino.getTab()+1, Nodo.TIPO_SINO_COND, sino.getFila(), sino.getColumna());
                    nsino.agregarHijoNI(e);
                    Nodo cod = new Nodo ("BLOQUE CODIGO", sino.getTab()+1, Nodo.TIPO_BLOQUE);
                    nsino.agregarHijoNI(cod);
                    RESULT = nsino;
              
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Condicion",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Condicion ::= RSI PARENTESISA Expresion PARENTESISC RENTONCES PUNTOPUNTO 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
                    token si = (token) s;
                    Nodo nsi = new Nodo ("si", si.getTab()+1, Nodo.TIPO_SI, si.getFila(), si.getColumna());
                    nsi.agregarHijoNI(e);
                    Nodo cod = new Nodo ("BLOQUE CODIGO", si.getTab()+1, Nodo.TIPO_BLOQUE);
                    nsi.agregarHijoNI(cod);
                    RESULT = nsi;
              
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Condicion",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Param_Ciclo ::= IDVAR IGUALADOR Expresion 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token idVar = (token) id; 
                        Nodo NFP = new Nodo ("ASIGNACION", idVar.getTab() + 1, Nodo.TIPO_ASIGNACION);
                        NFP.agregarHijoNI(new Nodo(idVar.getNombre(), 0, Nodo.TIPO_IDENTIFCADOR));
                        NFP.agregarHijoNI(e);
                        RESULT = NFP;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Param_Ciclo",24, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Param_Ciclo ::= IDVAR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token idVar = (token) id; 
                        Nodo NFP = new Nodo ("ASIGNACION", idVar.getTab() + 1, Nodo.TIPO_ASIGNACION);
                        NFP.agregarHijoNI(new Nodo(idVar.getNombre(), 0, Nodo.TIPO_IDENTIFCADOR));
                        RESULT = NFP;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Param_Ciclo",24, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Ciclo ::= RDESDE PARENTESISA Param_Ciclo RMIENTRAS Expresion RDECREMENTAR ENTERO PARENTESISC RHACER 
            {
              Nodo RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		Nodo pc = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		Nodo ex = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		
                token desde = (token) des;
                token numero = (token) num;
                Nodo ndesde = new Nodo(desde.getNombre(), desde.getTab() + 1, Nodo.TIPO_DESDE,desde.getFila(), desde.getColumna());
                ndesde.agregarHijoNI(pc);
                ndesde.agregarHijoNI(ex);
                
                int a = Integer.parseInt(numero.getNombre());
                if (a < 0) parser.syntax_error("El valor de incremento en el ciclo no puede ser un numero negativo: [" + numero.getFila() +","+ numero.getColumna() + "]");
                ndesde.agregarHijoNI(new Nodo((a*-1) + "", 0, Nodo.TIPO_ENTERO, numero.getFila(), numero.getColumna()));
                ndesde.agregarHijoNI(new Nodo ("BLOQUE CODIGO", desde.getTab()+1, Nodo.TIPO_BLOQUE));
                RESULT = ndesde;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Ciclo",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Ciclo ::= RDESDE PARENTESISA Param_Ciclo RMIENTRAS Expresion RINCREMENTAR ENTERO PARENTESISC RHACER 
            {
              Nodo RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		Object des = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		Nodo pc = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		Nodo ex = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		
                token desde = (token) des;
                token numero = (token) num;
                Nodo ndesde = new Nodo(desde.getNombre(), desde.getTab() + 1, Nodo.TIPO_DESDE,desde.getFila(), desde.getColumna());
                ndesde.agregarHijoNI(pc);
                ndesde.agregarHijoNI(ex);
                
                int a = Integer.parseInt(numero.getNombre());
                if (a < 0) parser.syntax_error("El valor de incremento en el ciclo no puede ser un numero negativo: [" + numero.getFila() +","+ numero.getColumna() + "]");
                ndesde.agregarHijoNI(new Nodo(a + "", 0, Nodo.TIPO_ENTERO, numero.getFila(), numero.getColumna()));
                ndesde.agregarHijoNI(new Nodo ("BLOQUE CODIGO", desde.getTab()+1, Nodo.TIPO_BLOQUE));
                RESULT = ndesde;
                
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Ciclo",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Funcion_Archivo ::= Campo_Archivo PUNTO Operacion_Archivo 
            {
              Nodo RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo ca = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    token operador = (token) oa;
                    Nodo res = new Nodo(operador.getNombre(), 0, Nodo.TIPO_OPERACION_ARCHIVO, operador.getFila(), operador.getColumna());
                    res.agregarHijoNI(ca);
                    RESULT = res;
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Funcion_Archivo",26, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Datos ::= RFALSE 
            {
              Nodo RESULT =null;
		int templeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tempright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object temp = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		token dat = (token) temp; RESULT = new Nodo(dat.getNombre(), 0, Nodo.TIPO_BOLEANO, dat.getFila(), dat.getColumna());
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Datos",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Datos ::= RTRUE 
            {
              Nodo RESULT =null;
		int templeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tempright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object temp = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		token dat = (token) temp; RESULT = new Nodo(dat.getNombre(), 0, Nodo.TIPO_BOLEANO, dat.getFila(), dat.getColumna());
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Datos",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Datos ::= CADENA 
            {
              Nodo RESULT =null;
		int templeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tempright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object temp = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		token dat = (token) temp; RESULT = new Nodo(dat.getNombre(), 0, Nodo.TIPO_CADENA, dat.getFila(), dat.getColumna());
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Datos",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Datos ::= REAL 
            {
              Nodo RESULT =null;
		int templeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tempright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object temp = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		token dat = (token) temp; RESULT = new Nodo(dat.getNombre(), 0, Nodo.TIPO_REAL, dat.getFila(), dat.getColumna());
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Datos",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Datos ::= ENTERO 
            {
              Nodo RESULT =null;
		int templeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tempright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object temp = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		token dat = (token) temp; RESULT = new Nodo(dat.getNombre(), 0, Nodo.TIPO_ENTERO, dat.getFila(), dat.getColumna());
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Datos",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Datos ::= IDVAR 
            {
              Nodo RESULT =null;
		int templeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tempright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object temp = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		token dat = (token) temp; RESULT = new Nodo(dat.getNombre(), 0, Nodo.TIPO_IDENTIFCADOR, dat.getFila(), dat.getColumna());
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Datos",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Parametro_Enviado ::= Datos COMA Parametro_Enviado 
            {
              ArrayList<Nodo> RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo dat = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		ArrayList<Nodo> array = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        if (array == null) array = new ArrayList<>();   
                        array.add(dat);
                        RESULT = array;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Parametro_Enviado",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Parametro_Enviado ::= Datos 
            {
              ArrayList<Nodo> RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo dat = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        ArrayList<Nodo> arry = new ArrayList<>();
                        arry.add(dat);
                        RESULT = arry;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Parametro_Enviado",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Llamada_Funcion ::= IDVAR PARENTESISA PARENTESISC 
            {
              Nodo RESULT =null;
		int IDVleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int IDVright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object IDV = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		
                    token idVar =(token) IDV;

                    RESULT = new Nodo(idVar.getNombre(), idVar.getTab()+1, Nodo.TIPO_LLAMADA_FUNCION, idVar.getFila(), idVar.getColumna());
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Llamada_Funcion",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Llamada_Funcion ::= IDVAR PARENTESISA Parametro_Enviado PARENTESISC 
            {
              Nodo RESULT =null;
		int IDVleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int IDVright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object IDV = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		ArrayList<Nodo> par = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                    token idVar =(token) IDV;

                    Nodo base = new Nodo(idVar.getNombre(), idVar.getTab()+1, Nodo.TIPO_LLAMADA_FUNCION, idVar.getFila(), idVar.getColumna());
                    Nodo parametros = new Nodo("PARAMETROS", 0, Nodo.TIPO_PARAMETROS, idVar.getFila(), idVar.getColumna());
                    parametros.setHijos(par);
                    base.agregarHijoNI(parametros);
                    RESULT = base;
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Llamada_Funcion",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expresion_PosPreIncremento ::= IDVAR RESTA RESTA 
            {
              Nodo RESULT =null;
		int IDVleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int IDVright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object IDV = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		
                                token idVar = (token) IDV;
                                Nodo i = new Nodo ("-", 0, Nodo.TIPO_OPERADOR, idVar.getFila(), idVar.getColumna());
                                i.agregarHijoNI(new Nodo (idVar.getNombre(), 0, Nodo.TIPO_IDENTIFCADOR, idVar.getFila(), idVar.getColumna()));
                                i.agregarHijoNI(new Nodo ("1", 0, Nodo.TIPO_ENTERO, idVar.getFila(), idVar.getColumna()));
                                RESULT = i;
                            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion_PosPreIncremento",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expresion_PosPreIncremento ::= SUMA SUMA IDVAR 
            {
              Nodo RESULT =null;
		int IDVleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int IDVright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object IDV = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                                token idVar = (token) IDV;
                                Nodo i = new Nodo ("+", 0, Nodo.TIPO_OPERADOR, idVar.getFila(), idVar.getColumna());
                                i.agregarHijoNI(new Nodo (idVar.getNombre(), 0, Nodo.TIPO_IDENTIFCADOR, idVar.getFila(), idVar.getColumna()));
                                i.agregarHijoNI(new Nodo ("1", 0, Nodo.TIPO_ENTERO, idVar.getFila(), idVar.getColumna()));
                                RESULT = i;
                            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion_PosPreIncremento",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Shift_Boleana ::= OR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = o;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Shift_Boleana",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Shift_Boleana ::= AND 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = a;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Shift_Boleana",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expresion ::= Expresion Shift_Boleana Expresion 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token operador = (token) op;
                        Nodo base = new Nodo (operador.getNombre(), 0, Nodo.TIPO_OPERADOR, operador.getFila(), operador.getColumna());
                        base.agregarHijoNI(l);
                        base.agregarHijoNI(r);
                        RESULT = base;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expresion ::= Expresion MENOR Expresion 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token operador = (token) op;
                        Nodo base = new Nodo (operador.getNombre(), 0, Nodo.TIPO_OPERADOR, operador.getFila(), operador.getColumna());
                        base.agregarHijoNI(l);
                        base.agregarHijoNI(r);
                        RESULT = base;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expresion ::= Expresion MAYOR Expresion 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token operador = (token) op;
                        Nodo base = new Nodo (operador.getNombre(), 0, Nodo.TIPO_OPERADOR, operador.getFila(), operador.getColumna());
                        base.agregarHijoNI(l);
                        base.agregarHijoNI(r);
                        RESULT = base;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expresion ::= Expresion MENORIGUAL Expresion 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token operador = (token) op;
                        Nodo base = new Nodo (operador.getNombre(), 0, Nodo.TIPO_OPERADOR, operador.getFila(), operador.getColumna());
                        base.agregarHijoNI(l);
                        base.agregarHijoNI(r);
                        RESULT = base;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expresion ::= Expresion MAYORIGUAL Expresion 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token operador = (token) op;
                        Nodo base = new Nodo (operador.getNombre(), 0, Nodo.TIPO_OPERADOR, operador.getFila(), operador.getColumna());
                        base.agregarHijoNI(l);
                        base.agregarHijoNI(r);
                        RESULT = base;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expresion ::= Expresion DIFERENTE Expresion 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token operador = (token) op;
                        Nodo base = new Nodo (operador.getNombre(), 0, Nodo.TIPO_OPERADOR, operador.getFila(), operador.getColumna());
                        base.agregarHijoNI(l);
                        base.agregarHijoNI(r);
                        RESULT = base;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expresion ::= Expresion COMPARADOR Expresion 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token operador = (token) op;
                        Nodo base = new Nodo (operador.getNombre(), 0, Nodo.TIPO_OPERADOR, operador.getFila(), operador.getColumna());
                        base.agregarHijoNI(l);
                        base.agregarHijoNI(r);
                        RESULT = base;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expresion ::= Expresion MODULACION Expresion 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token operador = (token) op;
                        Nodo base = new Nodo (operador.getNombre(), 0, Nodo.TIPO_OPERADOR, operador.getFila(), operador.getColumna());
                        base.agregarHijoNI(l);
                        base.agregarHijoNI(r);
                        RESULT = base;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expresion ::= Expresion EXPONENTE Expresion 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token operador = (token) op;
                        Nodo base = new Nodo (operador.getNombre(), 0, Nodo.TIPO_OPERADOR, operador.getFila(), operador.getColumna());
                        base.agregarHijoNI(l);
                        base.agregarHijoNI(r);
                        RESULT = base;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expresion ::= Expresion DIVISION Expresion 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token operador = (token) op;
                        Nodo base = new Nodo (operador.getNombre(), 0, Nodo.TIPO_OPERADOR, operador.getFila(), operador.getColumna());
                        base.agregarHijoNI(l);
                        base.agregarHijoNI(r);
                        RESULT = base;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expresion ::= Expresion MULTIPLICACION Expresion 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token operador = (token) op;
                        Nodo base = new Nodo (operador.getNombre(), 0, Nodo.TIPO_OPERADOR, operador.getFila(), operador.getColumna());
                        base.agregarHijoNI(l);
                        base.agregarHijoNI(r);
                        RESULT = base;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expresion ::= Expresion RESTA Expresion 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token operador = (token) op;
                        Nodo base = new Nodo (operador.getNombre(), 0, Nodo.TIPO_OPERADOR, operador.getFila(), operador.getColumna());
                        base.agregarHijoNI(l);
                        base.agregarHijoNI(r);
                        RESULT = base;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expresion ::= Expresion SUMA Expresion 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token operador = (token) op;
                        Nodo base = new Nodo (operador.getNombre(), 0, Nodo.TIPO_OPERADOR, operador.getFila(), operador.getColumna());
                        base.agregarHijoNI(l);
                        base.agregarHijoNI(r);
                        RESULT = base;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expresion ::= Expresion COMA Expresion 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token operador = (token) op;
                        Nodo base = new Nodo (operador.getNombre(), 0, Nodo.TIPO_OPERADOR, operador.getFila(), operador.getColumna());
                        base.agregarHijoNI(l);
                        base.agregarHijoNI(r);
                        RESULT = base;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expresion ::= PARENTESISA Expresion PARENTESISC 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                    RESULT = exp;
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expresion ::= Llamada_Funcion 
            {
              Nodo RESULT =null;
		int llamleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int llamright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo llam = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = llam; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expresion ::= Campo_Archivo 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = n;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expresion ::= Funcion_Archivo 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = n;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expresion ::= INTERROGANTE 
            {
              Nodo RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                            token inte = (token) in;
                            RESULT = new Nodo(inte.getNombre(), 0, Nodo.TIPO_INTERROGANTE, inte.getFila(), inte.getColumna());
                        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expresion ::= REAL 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    token aux = (token) n; 
                    RESULT = new Nodo(aux.getNombre(), 0, Nodo.TIPO_REAL, aux.getFila(), aux.getColumna());
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expresion ::= ENTERO 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    token aux = (token) n; 
                    RESULT = new Nodo(aux.getNombre(), 0, Nodo.TIPO_ENTERO, aux.getFila(), aux.getColumna());
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion ::= CADENA 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    token aux = (token) n; 
                    RESULT = new Nodo(aux.getNombre(), 0, Nodo.TIPO_CADENA, aux.getFila(), aux.getColumna());
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= RFALSE 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    token aux = (token) n; 
                    RESULT = new Nodo(aux.getNombre(), 0, Nodo.TIPO_BOLEANO, aux.getFila(), aux.getColumna());
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= RTRUE 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    token aux = (token) n; 
                    RESULT = new Nodo(aux.getNombre(), 0, Nodo.TIPO_BOLEANO, aux.getFila(), aux.getColumna());
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= IDVAR 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    token aux = (token) n; 
                    RESULT = new Nodo(aux.getNombre(), 0, Nodo.TIPO_IDENTIFCADOR, aux.getFila(), aux.getColumna());
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Instruccion ::= RESCRIBIR Expresion 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    token esc = (token) e;
                    Nodo Base = new Nodo (esc.getNombre(), esc.getTab()+1, Nodo.TIPO_INSTRUCCION, esc.getFila(), esc.getColumna());
                    exp.setTab(esc.getTab());
                    Base.agregarHijoNI(exp);
                    RESULT = Base;
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Asignacion ::= IDVAR IGUALADOR Expresion_PosPreIncremento 
            {
              Nodo RESULT =null;
		int IDVleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int IDVright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object IDV = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int IGleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int IGright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object IG = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    token idVar = (token) IDV;
                    token igual = (token) IG;
                    Nodo Base = new Nodo (igual.getNombre(), idVar.getTab()+1, Nodo.TIPO_ASIGNACION, idVar.getFila(), igual.getColumna());
                    Base.agregarHijoNI(new Nodo(idVar.getNombre(), 0, Nodo.TIPO_IDENTIFCADOR, idVar.getFila(), idVar.getColumna()));
                    Base.agregarHijoNI(r);
                    RESULT = Base;
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Asignacion",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Asignacion ::= IDVAR IGUALADOR Expresion 
            {
              Nodo RESULT =null;
		int IDVleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int IDVright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object IDV = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int IGleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int IGright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object IG = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    token idVar = (token) IDV;
                    token igual = (token) IG;
                    Nodo Base = new Nodo (igual.getNombre(), idVar.getTab()+1, Nodo.TIPO_ASIGNACION, idVar.getFila(), igual.getColumna());
                    Base.agregarHijoNI(new Nodo(idVar.getNombre(), 0, Nodo.TIPO_IDENTIFCADOR, idVar.getFila(), idVar.getColumna()));
                    Base.agregarHijoNI(r);
                    RESULT = Base;
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Asignacion",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Linea_Codigo ::= Retornar 
            {
              Nodo RESULT =null;
		int templeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tempright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo temp = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		if (parser.pila.push(temp) == 0) parser.syntax_error(parser.TIPO_INDENTACION, temp.getFila(), temp.getColumna());
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Linea_Codigo",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Linea_Codigo ::= Asignacion 
            {
              Nodo RESULT =null;
		int templeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tempright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo temp = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		if (parser.pila.push(temp) == 0) parser.syntax_error(parser.TIPO_INDENTACION, temp.getFila(), temp.getColumna());
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Linea_Codigo",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Linea_Codigo ::= Instruccion 
            {
              Nodo RESULT =null;
		int templeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tempright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo temp = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		if (parser.pila.push(temp) == 0) parser.syntax_error(parser.TIPO_INDENTACION, temp.getFila(), temp.getColumna());
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Linea_Codigo",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Linea_Codigo ::= Condicion 
            {
              Nodo RESULT =null;
		int templeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tempright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo temp = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    switch (parser.pila.push(temp)){
                        case 0: parser.syntax_error(parser.TIPO_INDENTACION, temp.getFila(), temp.getColumna());
                            break;
                        case 2: parser.syntax_error(parser.TIPO_CONDICION, temp.getFila(), temp.getColumna());
                            break;
                    }
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Linea_Codigo",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Linea_Codigo ::= Ciclo 
            {
              Nodo RESULT =null;
		int templeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tempright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo temp = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		if (parser.pila.push(temp) == 0) parser.syntax_error(parser.TIPO_INDENTACION, temp.getFila(), temp.getColumna());
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Linea_Codigo",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Linea_Codigo ::= Llamada_Funcion 
            {
              Nodo RESULT =null;
		int templeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tempright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo temp = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 if (parser.pila.push(temp) == 0) parser.syntax_error(parser.TIPO_INDENTACION, temp.getFila(), temp.getColumna()); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Linea_Codigo",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Seccion_Codigo ::= Linea_Codigo Seccion_Codigo 
            {
              Nodo RESULT =null;
		
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Seccion_Codigo",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Seccion_Codigo ::= Linea_Codigo 
            {
              Nodo RESULT =null;
		
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Seccion_Codigo",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Valor_Retorno ::= Expresion 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT =exp;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Valor_Retorno",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Valor_Retorno ::= RNULO 
            {
              Nodo RESULT =null;
		int nuleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object nu = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    token nulo = (token) nu;
                    RESULT = new Nodo("NULO", 0, Nodo.TIPO_NULO, nulo.getFila(), nulo.getColumna());
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Valor_Retorno",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Retornar ::= RRETORNAR Valor_Retorno 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int vrleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int vrright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo vr = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                            token ret = (token) r;
                            Nodo retor = new Nodo("RETORNAR", ret.getTab() + 1, Nodo.TIPO_RETORNAR, ret.getFila(), ret.getColumna());
                            vr.setTab(ret.getTab() + 2);
                            if(retor.agregarHijo(vr)== 0) parser.syntax_error(parser.TIPO_INDENTACION, ret.getFila(), vr.getColumna()); 
                            RESULT = retor;
                        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Retornar",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Funcion_Contenido ::= Seccion_Codigo PUNTOCOMA 
            {
              Nodo RESULT =null;
		
                            Nodo contenido = new Nodo("BLOQUE CONTENIDO", 2, Nodo.TIPO_BLOQUE);
                            contenido.setHijos(parser.pila.getPila());
                            parser.pila = new Pila();
                            RESULT = contenido;
                        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Funcion_Contenido",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Funcion_Contenido ::= Seccion_Codigo 
            {
              Nodo RESULT =null;
		
                            Nodo contenido = new Nodo("BLOQUE CONTENIDO", 2, Nodo.TIPO_BLOQUE);
                            contenido.setHijos(parser.pila.getPila());
                            parser.pila = new Pila();
                            RESULT = contenido;
                           
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Funcion_Contenido",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Parametro_Variable ::= Tipo_Dato IDVAR 
            {
              Nodo RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int IDVleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int IDVright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object IDV = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
                        Nodo aux;
                        token idVar= (token) IDV;
                         token tipoDato= (token) td;
                        int valor = 0, tipo = 0;
                        switch (tipoDato.getNombre()){
                            case "entero": tipo = Nodo.TIPO_ENTERO; break;
                            case "real": tipo = Nodo.TIPO_REAL; break;
                            case "cadena": tipo = Nodo.TIPO_CADENA; break;
                            case "boleano": tipo = Nodo.TIPO_BOLEANO; break;
                        }
                        aux = new Nodo(idVar.getNombre(), 2, tipo);
                        RESULT = aux;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Parametro_Variable",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Funcion_Parametro ::= Parametro_Variable COMA Funcion_Parametro 
            {
              Nodo RESULT =null;
		int pvleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo pv = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int NFPleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int NFPright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo NFP = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        if (NFP == null) NFP = new Nodo ("PARAMETROS", 1, Nodo.TIPO_PARAMETROS);
                        
                        NFP.agregarHijo(pv);

                        RESULT = NFP;
                     
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Funcion_Parametro",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Funcion_Parametro ::= Parametro_Variable 
            {
              Nodo RESULT =null;
		int pvleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo pv = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
                        Nodo NFP = new Nodo ("PARAMETROS", 1, Nodo.TIPO_PARAMETROS);
                        NFP.agregarHijo(pv);
                        RESULT = NFP;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Funcion_Parametro",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Id_Funcion ::= RPRINCIPAL 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = p;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Id_Funcion",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Id_Funcion ::= IDVAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Id_Funcion",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Funcion_Encabezado ::= Tipo_Dato Id_Funcion PARENTESISA Funcion_Parametro PARENTESISC 
            {
              Nodo RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int IDVleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int IDVright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object IDV = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int hijoParamleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int hijoParamright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo hijoParam = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                        token aux2 = (token) IDV;
                        token tipo = (token) td;
                    
                        Nodo nodoFuncion = new Nodo(aux2.getNombre(), tipo.getTab(), Nodo.TIPO_FUNCION);

                        int tipoDato = 0;
                        switch (tipo.getNombre()){
                            case "entero": tipoDato = Nodo.TIPO_ENTERO; break;
                            case "real": tipoDato = Nodo.TIPO_REAL; break;
                            case "cadena": tipoDato = Nodo.TIPO_CADENA; break;
                            case "boleano": tipoDato = Nodo.TIPO_BOLEANO; break;
                        }
                    nodoFuncion.agregarHijoNI(new Nodo("TIPO", 0, tipoDato));
                        nodoFuncion.agregarHijoNI(hijoParam);    
                        RESULT = nodoFuncion;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Funcion_Encabezado",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Funcion_Encabezado ::= Tipo_Dato Id_Funcion PARENTESISA PARENTESISC 
            {
              Nodo RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int IDVleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int IDVright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object IDV = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		
                    
                    token aux2 = (token) IDV;
                    token tipo = (token) td;
                    
                    Nodo nodoFuncion = new Nodo(aux2.getNombre(), tipo.getTab(), Nodo.TIPO_FUNCION);
                    int tipoDato = 0;
                    switch (tipo.getNombre()){
                        case "entero": tipoDato = Nodo.TIPO_ENTERO; break;
                        case "real": tipoDato = Nodo.TIPO_REAL; break;
                        case "cadena": tipoDato = Nodo.TIPO_CADENA; break;
                        case "boleano": tipoDato = Nodo.TIPO_BOLEANO; break;
                    }
                    nodoFuncion.agregarHijoNI(new Nodo("TIPO", 0, tipoDato));
                    RESULT = nodoFuncion;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Funcion_Encabezado",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Funcion ::= Funcion_Encabezado Funcion_Contenido 
            {
              Nodo RESULT =null;
		int FEleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int FEright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo FE = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int FCleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int FCright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo FC = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                if(FC != null) FE.agregarHijoNI(FC);
                    
                RESULT = FE;
         
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Bloque_Funciones ::= Funcion Bloque_Funciones 
            {
              Object RESULT =null;
		int nodoFuncionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int nodoFuncionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo nodoFuncion = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                        if(parser.auxiliar2 == null) parser.auxiliar2 = new Nodo("BLOQUE FUNCION", 0, Nodo.TIPO_BLOQUE);
                        //if(parser.auxiliar2.agregarHijoNI(nodoFuncion) == 0) parser.syntax_error("Error de identacion en la  Funcion: \"" + nodoFuncion.getContenido() + "\"");
                        parser.auxiliar2.agregarHijoNI(nodoFuncion);
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Bloque_Funciones",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Bloque_Funciones ::= Funcion 
            {
              Object RESULT =null;
		int nodoFuncionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nodoFuncionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo nodoFuncion = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        if(parser.auxiliar2 == null) parser.auxiliar2 = new Nodo("BLOQUE FUNCION", 0, Nodo.TIPO_BLOQUE);
                        //if(parser.auxiliar2.agregarHijoNI(nodoFuncion) == 0) parser.syntax_error("Error de identacion en la  Funcion: \"" + nodoFuncion.getContenido() + "\"");
                        parser.auxiliar2.agregarHijoNI(nodoFuncion);
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Bloque_Funciones",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IdFun ::= RPUBLO 
            {
              Nodo RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IdFun",34, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IdFun ::= RPROTO 
            {
              Nodo RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IdFun",34, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IdFun ::= RPRIVO 
            {
              Nodo RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IdFun",34, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Funciones ::= RMET IdFun PUNTOPUNTO Bloque_Funciones 
            {
              Nodo RESULT =null;
		int BFleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int BFright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object BF = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
            Nodo prop = new Nodo("BLOQUE METODOS", 0, Nodo.TIPO_METODOS);
            prop.agregarHijoNI(parser.auxiliar2);
            parser.auxiliar2 = null;
            RESULT = prop;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Funciones",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Varias_Variables ::= IDVAR COMA Varias_Variables 
            {
              ArrayList<Nodo> RESULT =null;
		int IDVleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int IDVright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Object IDV = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		ArrayList<Nodo> variables = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token idVar = (token) IDV;
                        if(idVar==null) variables = new ArrayList<>();
                        variables.add(new Nodo(idVar.getNombre(), 0, 0, idVar.getFila(), idVar.getColumna()));
                        RESULT = variables;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Varias_Variables",36, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Varias_Variables ::= IDVAR 
            {
              ArrayList<Nodo> RESULT =null;
		int IDVleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int IDVright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object IDV = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token idVar = (token) IDV;
                        ArrayList<Nodo> variables = new ArrayList<>();
                        variables.add(new Nodo(idVar.getNombre(), 0, 0, idVar.getFila(), idVar.getColumna()));
                        RESULT = variables;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Varias_Variables",36, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo_Dato ::= RCADENA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = cad;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Tipo_Dato",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo_Dato ::= RREAL 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = num;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Tipo_Dato",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo_Dato ::= RENTERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = num;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Tipo_Dato",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo_Dato ::= RBOLEANO 
            {
              Object RESULT =null;
		int bolleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bolright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object bol = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = bol;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Tipo_Dato",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Linea_Variables ::= Tipo_Dato Varias_Variables 
            {
              ArrayList<Nodo> RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int vvleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		ArrayList<Nodo> vv = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        token tipoDato= (token) td;
                        int valor = 0, tipo = 0;
                        switch (tipoDato.getNombre()){
                            case "entero": tipo = Nodo.TIPO_ENTERO; break;
                            case "real": tipo = Nodo.TIPO_REAL; break;
                            case "cadena": tipo = Nodo.TIPO_CADENA; break;
                            case "boleano": tipo = Nodo.TIPO_BOLEANO; break;
                        }
                         for(int i = 0; i < vv.size(); i++){
                            vv.get(i).setTab(tipoDato.getTab()+1);
                            vv.get(i).setTipo(tipo);
                        }
                        RESULT = vv;
                       
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Linea_Variables",35, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Seccion_Variables ::= Linea_Variables Seccion_Variables 
            {
              Nodo RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		ArrayList<Nodo> lv = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int secVarleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int secVarright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo secVar = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        if(secVar == null) secVar = new Nodo("BLOQUE VARIABLES", 1, Nodo.TIPO_BLOQUE);
                        for(int i = 0; i < lv.size(); i++){
                           if(secVar.agregarHijo(lv.get(i)) == 0) parser.syntax_error(parser.TIPO_INDENTACION, lv.get(i).getFila(), lv.get(i).getColumna());
                        }  
                        RESULT = secVar;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Seccion_Variables",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Seccion_Variables ::= Linea_Variables 
            {
              Nodo RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		ArrayList<Nodo> lv = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        Nodo secVar = new Nodo("BLOQUE VARIABLES", 1, Nodo.TIPO_BLOQUE);
                        for(int i = 0; i < lv.size(); i++){
                           if(secVar.agregarHijo(lv.get(i)) == 0) parser.syntax_error(parser.TIPO_INDENTACION, lv.get(i).getFila(), lv.get(i).getColumna());
                        }   
                        RESULT = secVar;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Seccion_Variables",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdProp ::= RPUBA 
            {
              Nodo RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IdProp",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IdProp ::= RPROTA 
            {
              Nodo RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IdProp",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IdProp ::= RPRIVA 
            {
              Nodo RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IdProp",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Propiedades ::= RPROP IdProp PUNTOPUNTO Seccion_Variables 
            {
              Nodo RESULT =null;
		int svleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo sv = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
            Nodo prop = new Nodo("BLOQUE PROPIEDADES", 0, Nodo.TIPO_PROPIEDADES);
            prop.agregarHijo(sv);
            RESULT = prop;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Propiedades",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Clase_Encabezado ::= RCLASE IDCLASE 
            {
              Nodo RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
            token aux = (token) cl;
            Nodo nodoClase = new Nodo(aux.getNombre(), aux.getTab(), Nodo.TIPO_CLASE);
            RESULT = nodoClase;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Clase_Encabezado",30, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CLASE ::= Clase_Encabezado Propiedades Funciones 
            {
              Nodo RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo ce = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int svleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int svright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo sv = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
            
            ce.agregarHijoNI(sv);
            ce.agregarHijoNI(f);
            RESULT = ce;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Bloque_CLASES ::= CLASE Bloque_CLASES 
            {
              Nodo RESULT =null;
		int nodoClaseleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int nodoClaseright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo nodoClase = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                        if(parser.auxClases == null) parser.auxClases = new Nodo("BLOQUE CLASES", -1, Nodo.TIPO_CLASE);
                        //if(parser.auxiliar2.agregarHijoNI(nodoFuncion) == 0) parser.syntax_error("Error de identacion en la  Funcion: \"" + nodoFuncion.getContenido() + "\"");
                        parser.auxClases.agregarHijoNI(nodoClase);
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Bloque_CLASES",28, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Bloque_CLASES ::= CLASE 
            {
              Nodo RESULT =null;
		int nodoClaseleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nodoClaseright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo nodoClase = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        if(parser.auxClases == null) parser.auxClases = new Nodo("BLOQUE CLASES", -1, Nodo.TIPO_CLASE);
                        //if(parser.auxiliar2.agregarHijoNI(nodoFuncion) == 0) parser.syntax_error("Error de identacion en la  Funcion: \"" + nodoFuncion.getContenido() + "\"");
                        parser.auxClases.agregarHijoNI(nodoClase);
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Bloque_CLASES",28, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Linea_Librerias ::= RINCLUIR CADENA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        if(parser.auxLibrerias == null) parser.auxLibrerias = new Nodo("BLOQUE INCLUIR", -1, Nodo.TIPO_BLOQUE);
                        token aux = (token) c;
                        token aux2 = (token) i;
                        if(parser.auxLibrerias.agregarHijo(new Nodo(aux.getNombre(), aux2.getTab(), Nodo.TIPO_CADENA)) == 0) parser.syntax_error(parser.TIPO_INDENTACION, aux.getFila(), aux.getColumna());
                  
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Linea_Librerias",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Bloque_Librerias ::= Linea_Librerias Bloque_Librerias 
            {
              Object RESULT =null;
		
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Bloque_Librerias",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Bloque_Librerias ::= Linea_Librerias 
            {
              Object RESULT =null;
		
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Bloque_Librerias",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio ::= Bloque_Librerias Bloque_CLASES 
            {
              Object RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo bf = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
            if(parser.auxLibrerias != null){
                if(parser.raiz.agregarHijo(parser.auxLibrerias) == 0) parser.syntax_error(parser.TIPO_INDENTACION);
                parser.auxLibrerias = null;
            }
            if(parser.auxClases != null){
                if(parser.raiz.agregarHijo(parser.auxClases) == 0) parser.syntax_error(parser.TIPO_INDENTACION);
                parser.auxClases = null;
            }
          
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Inicio ::= Bloque_CLASES 
            {
              Object RESULT =null;
		
            if(parser.auxClases != null){
                if(parser.raiz.agregarHijo(parser.auxClases) == 0) parser.syntax_error(parser.TIPO_INDENTACION);
                parser.auxClases = null;
            }
          
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

